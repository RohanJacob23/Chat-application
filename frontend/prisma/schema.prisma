generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Friends {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  friendId      String[]
  friendRequest String[]
  userId        String   @unique @db.ObjectId
  user          User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  time           DateTime @db.Date
  messageContent String
  receiverId     String   @db.ObjectId
  sendersId      String   @db.ObjectId
  receiver       User     @relation("receiver", fields: [receiverId], references: [id])
  sender         User     @relation("sender", fields: [sendersId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  friends       Friends?  @relation("user")
  message       Message[] @relation("sender")
  received      Message[] @relation("receiver")
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
